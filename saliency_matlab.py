# -*- coding: utf-8 -*-
"""
@author: Victor Barres

Defines the interface between the Matlab SaliencyToolbox and TCG

Uses scipy.io to read .mat files.

The matlab saliency toolbox should have already generated the .mat files containing bottom-up saliency information.
"""
from __future__ import division

import scipy.io as sio

class SALIENCY_PARAMS:
    """
    Stores the parameters used in computing the bottom-up saliency data.
    
    Data:
        - foaSize (INT)
        - pyramidType (STR)
        - features ([STR])
        - weights ([FLOAT])
        - IORtype (STR)
        - shapeMode (STR)
        - levelParams (DICT) : minLevel:INT, maxlevel:INT, minDelta:INT, maxDelta:INT, mapLevel:INT
        - normtype (STR)
        - numIter (INT)
        - useRandom (BOOL)
        - segmentComputeType (STR)
        - IORdecay (FLOAT)
        - smOutputRange (FLOAT)
        - noiseAmpl (FLOAT)
        - noiseConst (FLOAT)
        - gaborParams (DICT): filterPeriod:INT, elongation:INT, filterSize:INT, stddev:INT, phasese:[INT]
        - oriAngles ([FLOAT])
        - oriComputeMode (STR)
        - visualizationStyle (STR)
        - exclusionMask ([])
    """
    def __init__(self):
        self.foaSize = 64
        self.pyramidType = 'dyadic'
        self.features = ['Color', 'Intensities', 'Orientations']
        self.weights = [1,1,1]
        self.IORtype = 'shape'
        self.shapeMode = 'shapeFM'
        self.levelParams = {'minLevel':3, 'maxLevel':5, 'minDelta':3, 'maxDelta':4, 'mapLevel':5}
        self.normtype = 'Iterative'
        self.numIter = 3
        self.useRandom = True
        self.segmentComputeType = 'Fast'
        self.IORdecay = 0.9999
        self.smOutputRange = 1.0e-09
        self.noiseAmpl = 1.0e-17
        self.noiseConst = 1.0e-14
        self.gaborParams = {'filterPeriod':7, 'elongation':1, 'filterSize':9, 'stddev':2.3333, 'phases':[0,90]}
        self.oriAngles = [0,45, 90, 135]
        self.oriComputeMode = 'efficient'
        self.visualizationStyle = 'Contour'
        self.exclusionMask =[]

class ORIG_IMAGE:
    """
    Stores the original image information.
    Data:
        - filename (STR)
        - data (ARRAY)
        - type (STR)
        - size ([INT])
        - dims (INT)
    """
    def __init__(self):
        self.fileName = None
        self.data = None
        self.type = None
        self.size = None
        self.dims = None

class SALIENCY_MAP:
    """
    Stores the saliency map.
    Data:
        - label (STR)
        - data (ARRAY)
    """
    def __init__(self):
        self.label = 'SaliencyMap'
        self.data = None

class CONSPICUITY_MAP:
    """
    Data:
        - label(STR)
        - data (ARRAY)
    """
    def __init__(self):
        self.label = None
        self.data = None

class PYRAMID_LEVEL:
    """
    Data:
        - label (STR)
        - data (ARRAY)
    """
    def __init__(self):
        self.label = None
        self.data = None

class PYRAMID:
    """
    Data:
         - lablel (STR)
         - type (STR)
         - levels ([PYRAMID_LEVEL])
    """
    def __init__(self):
        self.label = None
        self.type = None
        self.levels = []

class SALIENCY_FEATURE_DATA:
    """
    Data:
        - label (STR)
        - pyramid ([PYRAMID])
        - FM(ARRAY)
        - csLevels
        - CM (CONSPICUITY_MAP)
    """
    def __init__(self):
        self.label = None
        self.pyramid = []
        self.FM = []
        self.csLevels = None
        self.CM = None

class SALIENCY_DATA:
    """
    Data:
        - img_name (STR)
        - feature_data ([SALIENCY_FEATURE_DATA])
        - saliency_map (SALIENCY_MAP)
        - orig_image (ORIG_IMAGE)
        - params (SALIENCY_PARAMS)
    """
    def __init__(self):
        self.img_name = None
        self.feature_data = []
        self.saliency_map = None
        self.orig_image = None
        self.params = None
        

    def load(self, file_path):
        """
        Data:
            file_path (STR): path to the .mat file generated by TCG_saliency.m
        """
        mat_content= sio.loadmat(file_path, struct_as_record = False, squeeze_me=True)
        BU_saliency = mat_content['BU_saliency']
        
        self.img_name = BU_saliency.img_name
        
        params = BU_saliency.params
        self.params = self._load_params(params)
        
        saliency_map = BU_saliency.sal_map
        self.saliency_map = self._load_saliency_map(saliency_map)
        
        orig_image = BU_saliency.origImage
        self.orig_image = self._load_orig_image(orig_image)
        
        sal_data = BU_saliency.sal_data
        self.feature_data = self._load_feature_data(sal_data)
    
    def _load_params(self, params):
        """
        """
        myParams = SALIENCY_PARAMS()
        myParams.foaSize = params.foaSize
        myParams.pyramidType = params.pyramidType
        myParams.features = params.features
        myParams.weights = params.weights
        myParams.IORtype = params.IORtype
        myParams.shapeMode = params.shapeMode
        myParams.levelParams['minLevel'] =  params.levelParams.minLevel
        myParams.levelParams['maxLevel'] =  params.levelParams.maxLevel
        myParams.levelParams['minDelta'] =  params.levelParams.minDelta
        myParams.levelParams['maxDelta'] =  params.levelParams.maxDelta
        myParams.levelParams['mapLevel'] =  params.levelParams.mapLevel
        myParams.normtype = params.normtype
        myParams.numIter = params.numIter
        myParams.useRandom = params.useRandom
        myParams.segmentComputeType = params.segmentComputeType
        myParams.IORdecay = params.IORdecay
        myParams.smOutputRange = params.smOutputRange
        myParams.noiseAmpl = params.noiseAmpl
        myParams.noiseConst = params.noiseConst
        myParams.gaborParams['filterPeriod'] = params.gaborParams.filterPeriod
        myParams.gaborParams['elongation'] = params.gaborParams.elongation
        myParams.gaborParams['filterSize'] = params.gaborParams.filterSize
        myParams.gaborParams['stddev'] = params.gaborParams.stddev
        myParams.gaborParams['phases'] = params.gaborParams.phases
        myParams.oriAngles = params.oriAngles
        myParams.oriComputeMode = params.oriComputeMode
        myParams.visualizationStyle = params.visualizationStyle
        myParams.exclusionMask = params.exclusionMask
        return myParams
    
    def _load_saliency_map(self, saliency_map):
        """
        """
        mySalMap = SALIENCY_MAP()
        mySalMap.data = saliency_map.data
        return mySalMap
        
    def _load_orig_image(self, orig_image):
        """
        """
        myOrigImg = ORIG_IMAGE()
        myOrigImg.data = orig_image.data
        myOrigImg.dims = orig_image.dims
        myOrigImg.fileName = orig_image.filename
        myOrigImg.type =orig_image.type
        return myOrigImg
    
    def _load_feature_data(self, sal_data):
        """
        """
        myFeaturesData = []
        for feat in sal_data:
            feat_data = SALIENCY_FEATURE_DATA()
            feat_data.label= feat.label
            if type(feat.pyr) is sio.matlab.mio5_params.mat_struct:
                feat.pyr = [feat.pyr]
            for p in feat.pyr:
                myPyr = PYRAMID()
                myPyr.label = p.label
                myPyr.type = p.type
                for l in p.levels:
                    myLevel = PYRAMID_LEVEL()
                    myLevel.label = l.label
                    myLevel.data = l.data
                    myPyr.levels.append(myLevel)
                feat_data.pyramid.append(myPyr)
            feat_data.CM  = CONSPICUITY_MAP()
            feat_data.CM.label = feat.CM.label
            feat_data.CM.data = feat.CM.data
            feat_data.FM = feat.FM
            feat_data.csLevels = feat.csLevels
            myFeaturesData.append(feat_data)
                
        return myFeaturesData

###############################################################################
if __name__ == '__main__':
    saliency_data = SALIENCY_DATA()
    saliency_data.load("../../Python/SpyderWorkspace/SandBox/TestMatlabRead/balloons.mat")
    
    
        
        
        